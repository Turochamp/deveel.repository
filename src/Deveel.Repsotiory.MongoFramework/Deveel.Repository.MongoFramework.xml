<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Deveel.Repository.MongoFramework</name>
    </assembly>
    <members>
        <member name="T:Deveel.Data.LoggerExtensions.__TraceFindingByIdForTenantStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Deveel.Data.LoggerExtensions.__TraceFoundByIdForTenantStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Deveel.Data.LoggerExtensions.__TraceDeletingForTenantStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Deveel.Data.LoggerExtensions.__TraceDeletedForTenantStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Deveel.Data.LoggerExtensions.__TraceCreatedForTenantStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Deveel.Data.LoggerExtensions.__TraceUpdatingForTenantStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Deveel.Data.LoggerExtensions.__TraceUpdatedForTenantStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:Deveel.Data.MongoDbTenantConnection`2">
            <summary>
            Defines a connection to a MongoDB database for a specific tenant
            </summary>
            <typeparam name="TContext">
            The type of <see cref="T:MongoFramework.IMongoDbContext"/> for which this connection is
            specifically defined.
            </typeparam>
            <typeparam name="TTenantInfo">
            The type of <see cref="T:Finbuckle.MultiTenant.ITenantInfo"/> that defines the information
            of the tenant's connection.
            </typeparam>
        </member>
        <member name="M:Deveel.Data.MongoDbTenantConnection`2.#ctor(Finbuckle.MultiTenant.IMultiTenantContext{`1})">
            <summary>
            Constructs the connection to the MongoDB database for the tenant
            resolved by the given context.
            </summary>
            <param name="tenantContext">
            The context used to resolve the tenant information.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when the given <paramref name="tenantContext"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Deveel.Data.MongoDbTenantConnection`2.#ctor(`1)">
            <summary>
            Constructs the connection to the MongoDB database for the given tenant 
            </summary>
            <param name="tenantInfo">
            The <see cref="T:Finbuckle.MultiTenant.ITenantInfo"/> that defines the information on the
            connection to the tenant's database.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the given <paramref name="tenantInfo"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if the given <paramref name="tenantInfo"/> does not define
            any connection string.
            </exception>
        </member>
        <member name="P:Deveel.Data.MongoDbTenantConnection`2.TenantInfo">
            <summary>
            Gets the <see cref="T:Finbuckle.MultiTenant.ITenantInfo"/> that defines the information
            on the tenant's connection.
            </summary>
        </member>
        <member name="T:Deveel.Data.MongoRepository`2">
            <summary>
            An implementation of <see cref="T:Deveel.Data.IRepository`1"/> contract
            that uses the MongoDB system to store and retrieve data.
            </summary>
            <typeparam name="TContext">
            The type of the <see cref="T:MongoFramework.IMongoDbContext"/> that is used to
            handling the connection to the MongoDB server.
            </typeparam>
            <typeparam name="TEntity">
            The type of the entity that is stored in the repository.
            </typeparam>
        </member>
        <member name="M:Deveel.Data.MongoRepository`2.#ctor(`0,Deveel.Data.ISystemTime,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Constructs the repository with the given context and logger.
            </summary>
            <param name="context">
            The context that is used to handle the connection to the MongoDB server.
            </param>
            <param name="systemTime">
            A service that provides the current system time.
            </param>
            <param name="logger">
            A logger instance that is used to log messages from the repository.
            </param>
        </member>
        <member name="M:Deveel.Data.MongoRepository`2.#ctor(`0,Deveel.Data.ISystemTime,Microsoft.Extensions.Logging.ILogger{Deveel.Data.MongoRepository{`0,`1}})">
            <summary>
            Constructs the repository with the given context and logger.
            </summary>
            <param name="context">
            The context that is used to handle the connection to the MongoDB server.
            </param>
            <param name="systemTime">
            A service that provides the current system time.
            </param>
            <param name="logger">
            A logger instance that is used to log messages from the repository.
            </param>
        </member>
        <member name="P:Deveel.Data.MongoRepository`2.Context">
            <summary>
            Gets the context that is used to handle the connection to the MongoDB server.
            </summary>
        </member>
        <member name="P:Deveel.Data.MongoRepository`2.DbSet">
            <summary>
            Gets the <see cref="T:MongoFramework.IMongoDbSet`1"/> that is used to handle the
            repository operations.
            </summary>
        </member>
        <member name="P:Deveel.Data.MongoRepository`2.SystemTime">
            <summary>
            Gets a service that provides the current system time.
            </summary>
        </member>
        <member name="P:Deveel.Data.MongoRepository`2.Logger">
            <summary>
            Gets the <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance that is used to log messages
            </summary>
        </member>
        <member name="P:Deveel.Data.MongoRepository`2.TenantId">
            <summary>
            When the underlying context is a <see cref="T:MongoFramework.IMongoDbTenantContext"/>,
            this property returns the tenant identifier that is used to filter
            the data in the repository.
            </summary>
        </member>
        <member name="P:Deveel.Data.MongoRepository`2.Collection">
            <summary>
            Gets the <see cref="T:MongoDB.Driver.IMongoCollection`1"/> instance that is used
            to handle the data in the repository.
            </summary>
        </member>
        <member name="M:Deveel.Data.MongoRepository`2.ThrowIfDisposed">
            <summary>
            Throws an exception if the repository has been disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            Thrown when the repository has been disposed.
            </exception>
        </member>
        <member name="M:Deveel.Data.MongoRepository`2.MakeEntitySet">
            <summary>
            Constructs a new <see cref="T:MongoFramework.IMongoDbSet`1"/> that is
            coherent with the context and the entity type.
            </summary>
            <returns></returns>
            <exception cref="T:Deveel.Data.RepositoryException"></exception>
        </member>
        <member name="M:Deveel.Data.MongoRepository`2.GetEntityId(`1)">
            <summary>
            Gets the value of the ID property of the given entity.
            </summary>
            <param name="entity">
            The entity whose ID property value is to be retrieved.
            </param>
            <returns>
            Returns the value of the ID property of the given entity.
            </returns>
        </member>
        <member name="M:Deveel.Data.MongoRepository`2.ConvertIdValue(System.String)">
            <summary>
            Converts the given string value to the type of the ID property of the
            entity managed by this repository.
            </summary>
            <param name="id">
            The string representation of the ID value.
            </param>
            <returns>
            Returns the value converted accordingly to the type of the ID property
            of the entity managed by this repository, or <c>null</c> if the given
            string is <c>null</c> or empty.
            </returns>
            <exception cref="T:Deveel.Data.RepositoryException">
            Thrown if the entity managed by this repository has no ID property
            </exception>
            <exception cref="T:System.NotSupportedException">
            Thrown when the value cannot be converted to the type of the ID
            property of the entity managed by this repository.
            </exception>
        </member>
        <member name="M:Deveel.Data.MongoRepository`2.Assert(System.Object)">
            <summary>
            Asserts that the given entity is of the type managed by this repository.
            </summary>
            <param name="entity">
            The object that has to be asserted.
            </param>
            <returns>
            Returns an instance of the object casted to the type managed by this
            repository.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown when the given entity is not of the type managed by this
            repository
            </exception>
        </member>
        <member name="M:Deveel.Data.MongoRepository`2.GetFilterDefinition(Deveel.Data.IQueryFilter)">
            <summary>
            Gets the MongoDB filter definition for the given query filter.
            </summary>
            <param name="filter">
            The query filter to be converted to a MongoDB filter definition.
            </param>
            <returns>
            Returns an instance of <see cref="T:MongoDB.Driver.FilterDefinition`1"/> that
            is mapped from the given query filter.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown when the given query filter is not supported by this repository.
            </exception>
        </member>
        <member name="M:Deveel.Data.MongoRepository`2.CollectionExistsAsync(System.Threading.CancellationToken)">
            <summary>
            Verifies if the repository exists in the underlying database.
            </summary>
            <param name="cancellationToken">
            A cancellation token that can be used to cancel the operation.
            </param>
            <returns>
            Returns <c>true</c> if the repository exists in the underlying
            database, otherwise <c>false</c>.
            </returns>
            <exception cref="T:Deveel.Data.RepositoryException">
            Thrown when an error occurs while verifying the existence of the
            collection in the underlying database.
            </exception>
        </member>
        <member name="M:Deveel.Data.MongoRepository`2.OnCreating(`1)">
            <summary>
            A callback method that is invoked before the entity is created.
            </summary>
            <param name="entity">
            The entity that is about to be created.
            </param>
            <returns>
            Returns the entity that is about to be created.
            </returns>
        </member>
        <member name="M:Deveel.Data.MongoRepository`2.CreateAsync(`1,System.Threading.CancellationToken)">
            <summary>
            Creates a new entity in the repository.
            </summary>
            <param name="entity">
            The entity to be created in the repository.
            </param>
            <param name="cancellationToken">
            A cancellation token that can be used to cancel the operation.
            </param>
            <returns>
            Returns the unique identifier of the created entity.
            </returns>
            <exception cref="T:Deveel.Data.RepositoryException">
            Thrown when an error occurs while creating the entity in the
            underlying database.
            </exception>
        </member>
    </members>
</doc>
